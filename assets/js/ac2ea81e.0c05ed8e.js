"use strict";(self.webpackChunkauto_infra=self.webpackChunkauto_infra||[]).push([[742],{1313:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),i=["components"],o={slug:"RestAssuredAllure",title:"Advanced RestAssured Logging in Allure Report",author:"Bhargav Murari",author_title:"Automation Test Engineer @Kongsberg Digital",tags:["Selenium","Java","Reporting"],draft:!1},u=void 0,l={unversionedId:"Articles/2019-06-06-RestAssured_AllureLogging",id:"Articles/2019-06-06-RestAssured_AllureLogging",isDocsHomePage:!1,title:"Advanced RestAssured Logging in Allure Report",description:"image",source:"@site/docs/Articles/2019-06-06-RestAssured_AllureLogging.mdx",sourceDirName:"Articles",slug:"/Articles/RestAssuredAllure",permalink:"/home/docs/Articles/RestAssuredAllure",version:"current",frontMatter:{slug:"RestAssuredAllure",title:"Advanced RestAssured Logging in Allure Report",author:"Bhargav Murari",author_title:"Automation Test Engineer @Kongsberg Digital",tags:["Selenium","Java","Reporting"],draft:!1},sidebar:"tutorialSidebar",previous:{title:"Send Your Test Results to Microsoft Teams using AdaptiveCards.io",permalink:"/home/docs/Articles/MicrosoftTeams"},next:{title:"Advanced RestAssured Logging in Extent Report",permalink:"/home/docs/Articles/RestAssuredExtent"}},p=[],g={toc:p};function c(e){var t=e.components,o=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:r(8222).Z})),(0,s.kt)("p",null,"Goal: Record API Request and Response using RestAssured Logging with Minimal Coding, By Decreasing the Boiler Plate code for Reporting Purposes.\nLibraries in Use:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"RestAssured"),(0,s.kt)("li",{parentName:"ol"},"AllureReports"),(0,s.kt)("li",{parentName:"ol"},"TestNG")),(0,s.kt)("p",null,"Step1: Create a TestNG Listener Class as Below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'\npublic class AllureListener implements ITestListener, IInvokedMethodListener {\n    private ByteArrayOutputStream request = new ByteArrayOutputStream();\n    private  ByteArrayOutputStream response = new ByteArrayOutputStream();\n    private PrintStream requestVar = new PrintStream(request,true);\n    private PrintStream responseVar = new PrintStream(response,true);\n\n    @SneakyThrows\n    @Override\n    public void afterInvocation(IInvokedMethod method, ITestResult testResult) {\n        IInvokedMethodListener.super.afterInvocation(method, testResult);\n          logRequest(request);\n        logResponse(response);\n    }\n\n    @Attachment(value = "request", type = "text/plain")\n    public byte[] logRequest(final ByteArrayOutputStream stream) {\n        return attach(stream);\n    }\n\n    @Attachment(value = "response", type = "text/plain")\n    public byte[] logResponse(final ByteArrayOutputStream stream) {\n        return attach(stream);\n    }\n\n    public byte[] attach(final ByteArrayOutputStream log) {\n        final byte[] array=log.toByteArray();\n        log.reset();\n        return array;\n    }\n\n    @Override\n    public void onStart(ITestContext iTestContext) {\n        RestAssured.filters(new RequestLoggingFilter(LogDetail.ALL,requestVar),new ResponseLoggingFilter(LogDetail.ALL,responseVar));\n\n    }\n\n}\n')),(0,s.kt)("p",null,"From the above TestNG Listener class we are initializing two types of Variables.\nByteArrayOutPutStream\nPrintArrayStream"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'    private ByteArrayOutputStream request = new ByteArrayOutputStream();\n    private  ByteArrayOutputStream response = new ByteArrayOutputStream();\n    private PrintStream requestVar = new PrintStream(request,true);\n    private PrintStream responseVar = new PrintStream(response,true);\nAfter the Variables declaration I am adding request and response methods for allure to send the Logs with annotation @Attachment\n@Attachment(value = "request", type = "text/plain")\n    public byte[] logRequest(final ByteArrayOutputStream stream) {\n        return attach(stream);\n    }\n\n    @Attachment(value = "response", type = "text/plain")\n    public byte[] logResponse(final ByteArrayOutputStream stream) {\n        return attach(stream);\n    }\n\n')),(0,s.kt)("p",null,"And in OnStart Method we are defining the RestAssured LoggingLevel. by Using RestAssured.Filters and RequestLoggingFiler"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"}," public void onStart(ITestContext context) {\n\n        RestAssured.filters(new RequestLoggingFilter(LogDetail.ALL,requestVar),new ResponseLoggingFilter(LogDetail.ALL,responseVar));\n        test= extent.createTest(context.getName());\n    }\n")),(0,s.kt)("p",null,"After OnStart the execution will go to AfterInvoke method, this is where the Logs get pushed to Allure."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public void afterInvocation(IInvokedMethod method, ITestResult testResult) {\n        IInvokedMethodListener.super.afterInvocation(method, testResult);\n          logRequest(request);\n        logResponse(response);\n    }\n")),(0,s.kt)("p",null,"Thats it, Add the Above Listener to your TestNG xml and check the Report. Your Report will look like below."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:r(7780).Z})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:r(1269).Z})),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"image",src:r(6510).Z})))}c.isMDXComponent=!0},8222:function(e,t,r){t.Z=r.p+"assets/images/1-89666522aa7e94818fc6d8e8c2590b1b.png"},7780:function(e,t,r){t.Z=r.p+"assets/images/2-b379e492d49afd570ec1883fda5cb051.png"},1269:function(e,t,r){t.Z=r.p+"assets/images/3-09f5d68fa025328742be4c9c52033739.png"},6510:function(e,t,r){t.Z=r.p+"assets/images/4-4e88bb37cacf4269d22d0a99966c68aa.png"}}]);